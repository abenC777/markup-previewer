{"version":3,"sources":["components/Previewer.js","components/Editor.js","components/Wrapper.js","components/App.js","index.js"],"names":["marked","setOptions","breaks","renderer","Renderer","link","href","title","text","Previewer","props","dangerouslySetInnerHTML","__html","markdown","id","Editor","name","cols","rows","type","onChange","value","Wrapper","handleChange","e","setState","target","state","placeholder","this","className","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAIAA,IAAOC,WAAW,CAChBC,QAAQ,IAIV,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACrC,MAAO,mCAA4BF,EAA5B,aAAqCE,GAArC,QAGT,IAWeC,EAXG,SAACC,GACjB,OACE,qBACEC,wBAAyB,CACvBC,OAAQZ,IAAOU,EAAMG,SAAU,CAAEV,SAAUA,KAE7CW,GAAG,aClBM,SAASC,EAAOL,GAC7B,OACE,0BACEM,KAAK,SACLF,GAAG,SACHG,KAAK,MACLC,KAAK,KACLC,KAAK,OACLC,SAAUV,EAAMU,SAChBC,MAAOX,EAAMG,W,ICPbS,E,kDACJ,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAKRa,aAAe,SAACC,GACd,EAAKC,SAAS,CACZZ,SAAUW,EAAEE,OAAOL,SANrB,EAAKM,MAAQ,CACXd,SAAUe,GAHK,E,0CAYnB,WACE,OACE,gCACE,gCACE,qFACA,cAACb,EAAD,CAAQF,SAAUgB,KAAKF,MAAMd,SAAUO,SAAUS,KAAKN,kBAExD,qBAAKO,UAAU,cACf,8BACE,cAAC,EAAD,CAAWjB,SAAUgB,KAAKF,MAAMd,oB,GAtBpBkB,aA6BhBH,EAAW,2rCA6CFN,ICnEAU,MARf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,cAAC,EAAD,OCDNG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.10908d68.chunk.js","sourcesContent":["import React from \"react\";\r\nimport marked from \"marked\";\r\n\r\n// ALLOWS LINE BREAKS WITH RETURN BUTTON\r\nmarked.setOptions({\r\n  breaks: true,\r\n});\r\n\r\n// INSERTS target=\"_blank\" INTO HREF TAGS (required for codepen links)\r\nconst renderer = new marked.Renderer();\r\nrenderer.link = function (href, title, text) {\r\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + `</a>`;\r\n};\r\n\r\nconst Previewer = (props) => {\r\n  return (\r\n    <div\r\n      dangerouslySetInnerHTML={{\r\n        __html: marked(props.markdown, { renderer: renderer }),\r\n      }}\r\n      id=\"preview\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Previewer;\r\n\r\n//   class App extends React.Component {\r\n//     constructor(props) {\r\n//       super(props);\r\n//       this.state = {\r\n//         markdown: placeholder,\r\n//         editorMaximized: false,\r\n//         previewMaximized: false\r\n//       };\r\n//       this.handleChange = this.handleChange.bind(this);\r\n//       this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\r\n//       this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\r\n//     }\r\n//     handleChange(e) {\r\n//       this.setState({\r\n//         markdown: e.target.value\r\n//       });\r\n//     }\r\n//     handleEditorMaximize() {\r\n//       this.setState({\r\n//         editorMaximized: !this.state.editorMaximized\r\n//       });\r\n//     }\r\n//     handlePreviewMaximize() {\r\n//       this.setState({\r\n//         previewMaximized: !this.state.previewMaximized\r\n//       });\r\n//     }\r\n//     render() {\r\n//       const classes = this.state.editorMaximized\r\n//         ? ['editorWrap maximized', 'previewWrap hide', 'fa fa-compress']\r\n//         : this.state.previewMaximized\r\n//           ? ['editorWrap hide', 'previewWrap maximized', 'fa fa-compress']\r\n//           : ['editorWrap', 'previewWrap', 'fa fa-arrows-alt'];\r\n//       return (\r\n//         <div>\r\n//           <div className={classes[0]}>\r\n//             <Toolbar\r\n//               icon={classes[2]}\r\n//               onClick={this.handleEditorMaximize}\r\n//               text='Editor'\r\n//             />\r\n//             <Editor markdown={this.state.markdown} onChange={this.handleChange} />\r\n//           </div>\r\n//           <div className='converter' />\r\n//           <div className={classes[1]}>\r\n//             <Toolbar\r\n//               icon={classes[2]}\r\n//               onClick={this.handlePreviewMaximize}\r\n//               text='Previewer'\r\n//             />\r\n//             <Preview markdown={this.state.markdown} />\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n\r\n//   const Toolbar = props => {\r\n//     return (\r\n//       <div className='toolbar'>\r\n//         <i className='fa fa-free-code-camp' title='no-stack-dub-sack' />\r\n//         {props.text}\r\n//         <i className={props.icon} onClick={props.onClick} />\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const Editor = props => {\r\n//     return (\r\n//       <textarea\r\n//         id='editor'\r\n//         onChange={props.onChange}\r\n//         type='text'\r\n//         value={props.markdown}\r\n//       />\r\n//     );\r\n//   };\r\n\r\n//   const Preview = props => {\r\n//     return (\r\n//       <div\r\n//         dangerouslySetInnerHTML={{\r\n//           __html: marked(props.markdown, { renderer: renderer })\r\n//         }}\r\n//         id='preview'\r\n//       />\r\n//     );\r\n//   };\r\n\r\n//   const placeholder = `# Welcome to my React Markdown Previewer!\r\n\r\n//   ## This is a sub-heading...\r\n//   ### And here's some other cool stuff:\r\n\r\n//   Heres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n//   \\`\\`\\`\r\n//   // this is multi-line code:\r\n\r\n//   function anotherExample(firstLine, lastLine) {\r\n//     if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n//       return multiLineCode;\r\n//     }\r\n//   }\r\n//   \\`\\`\\`\r\n\r\n//   You can also make text **bold**... whoa!\r\n//   Or _italic_.\r\n//   Or... wait for it... **_both!_**\r\n//   And feel free to go crazy ~~crossing stuff out~~.\r\n\r\n//   There's also [links](https://www.freecodecamp.com), and\r\n//   > Block Quotes!\r\n\r\n//   And if you want to get really crazy, even tables:\r\n\r\n//   Wild Header | Crazy Header | Another Header?\r\n//   ------------ | ------------- | -------------\r\n//   Your content can | be here, and it | can be here....\r\n//   And here. | Okay. | I think we get it.\r\n\r\n//   - And of course there are lists.\r\n//     - Some are bulleted.\r\n//        - With different indentation levels.\r\n//           - That look like this.\r\n\r\n//   1. And there are numbererd lists too.\r\n//   1. Use just 1s if you want!\r\n//   1. And last but not least, let's not forget embedded images:\r\n\r\n//   ![React Logo w/ Text](https://goo.gl/Umyytc)\r\n//   `;\r\n","import React from \"react\";\r\n\r\nexport default function Editor(props) {\r\n  return (\r\n    <textarea\r\n      name=\"editor\"\r\n      id=\"editor\"\r\n      cols=\"100\"\r\n      rows=\"10\"\r\n      type=\"text\"\r\n      onChange={props.onChange}\r\n      value={props.markdown}\r\n    ></textarea>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Previewer from \"./Previewer\";\r\nimport Editor from \"./Editor\";\r\n\r\nclass Wrapper extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      markdown: placeholder,\r\n    };\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      markdown: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h1>Write here all the html markup you want to preview!</h1>\r\n          <Editor markdown={this.state.markdown} onChange={this.handleChange} />\r\n        </div>\r\n        <div className=\"converter\" />\r\n        <div>\r\n          <Previewer markdown={this.state.markdown} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst placeholder = `# Welcome to my React Markdown Previewer!\r\n  \r\n  ## This is a sub-heading...\r\n  ### And here's some other cool stuff:\r\n  \r\n  Heres some code, \\`<div></div>\\`, between 2 backticks.\r\n  \r\n  \\`\\`\\`\r\n  // this is multi-line code:\r\n  \r\n  function anotherExample(firstLine, lastLine) {\r\n    if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n      return multiLineCode;\r\n    }\r\n  }\r\n  \\`\\`\\`\r\n  \r\n  You can also make text **bold**... whoa!\r\n  Or _italic_.\r\n  Or... wait for it... **_both!_**\r\n  And feel free to go crazy ~~crossing stuff out~~.\r\n  \r\n  There's also [links](https://www.freecodecamp.com), and\r\n  > Block Quotes!\r\n  \r\n  And if you want to get really crazy, even tables:\r\n  \r\n  Wild Header | Crazy Header | Another Header?\r\n  ------------ | ------------- | -------------\r\n  Your content can | be here, and it | can be here....\r\n  And here. | Okay. | I think we get it.\r\n  \r\n  - And of course there are lists.\r\n    - Some are bulleted.\r\n       - With different indentation levels.\r\n          - That look like this.\r\n  \r\n  \r\n  1. And there are numbererd lists too.\r\n  1. Use just 1s if you want!\r\n  1. And last but not least, let's not forget embedded images:\r\n  \r\n  ![React Logo w/ Text](https://goo.gl/Umyytc)\r\n  `;\r\n\r\nexport default Wrapper;\r\n","import \"./App.scss\";\r\nimport Wrapper from \"./Wrapper\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Wrapper />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}